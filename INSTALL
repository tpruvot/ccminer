
You can use ./build.sh to configure and build with default options.

It is advised to run ./autogen.sh before ./configure (autoconf and automake
need to be installed on your system for autogen.sh to work)

./configure has an option named --with-cuda that allows you to specify
where your CUDA 6.5 toolkit is installed (usually /usr/local/cuda,
but some distros may have a different default location)


** How to compile on Ubuntu (16.04 LTS)

First, install Cuda toolkit and nVidia Driver, and type `nvidia-smi` to check if your card is detected.

Install dependencies
```sudo apt-get install libcurl4-openssl-dev libssl-dev libjansson-dev automake autotools-dev build-essential```

Ubuntu is now shipped with gcc 6 or 7 so please install gcc/g++ 5 and make it the default (required by the cuda toolkit)
```
sudo apt-get install gcc-5 g++-5
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 1
```

Then use the helper ./build.sh in ccminer source folder, edit configure.sh and the Makefile.am if required.
```
./build.sh
./ccminer --version
```


** How to compile on Fedora 25 **

Note: You may find an alternative method via rpms :
see https://negativo17.org/nvidia-driver/ and https://negativo17.org/repos/multimedia/


# Step 1: gcc and dependencies
dnf install gcc gcc-c++ autoconf automake
dnf install jansson-devel openssl-devel libcurl-devel zlib-devel

# Step 2: nvidia drivers (Download common linux drivers from nvidia site)
dnf install kernel-devel
dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
dnf check-update
dnf install xorg-x11-drv-nvidia-cuda kmod-nvidia
ln -s libnvidia-ml.so.1 /usr/lib64/libnvidia-ml.so

# Step 3: CUDA SDK (Download from nvidia the generic ".run" archive)
#         --override is required to ignore "too recent" gcc 6.3
#         --silent is required to install only the toolkit (no kmod)
./cuda_8.0.61_375.26_linux.run --toolkit --silent --override
nvcc --version

# add the nvcc binary path to the system
ln -s /usr/local/cuda-8.0 /usr/local/cuda # (if not already made)
echo 'export PATH=$PATH:/usr/local/cuda/bin' > /etc/profile.d/cuda.sh

# add the cudart library path to the system
echo /usr/local/cuda/lib64 > /etc/ld.so.conf.d/cuda.conf
ldconfig

# Step 4: Fix the toolkit incompatibility with gcc 6

# You need to build yourself an older GCC/G++ version, i recommend the 5.4
# see https://gcc.gnu.org/mirrors.html
# Note: this manual method will override the default gcc, it could be better to use a custom toolchain prefix

wget ftp://ftp.lip6.fr/pub/gcc/releases/gcc-5.4.0/gcc-5.4.0.tar.bz2
dnf install libmpc-devel mpfr-devel gmp-devel
./configure --prefix=/usr/local --enable-languages=c,c++,lto --disable-multilib
make -j 8 && make install
(while this step, you have the time to cook something :p)

# or, for previous fedora versions, edit the file /usr/local/cuda/include/host_config.h
# and comment/delete the line 121 : #error -- unsupported GNU version! gcc versions later than 5 are not supported!

./build.sh

./ccminer -n


** How to compile and run on Debian Stretch **

```
$ sudo apt install nvidia-cuda-toolkit

# ccminer is incompatible with openssl >= 1.1.0, because
# BN_init was removed in openssl 1.1.0
# (see https://wiki.openssl.org/index.php/Manual:BN_new(3) if you want)
# You can install both openssl 1.1.x and 1.0.x on Debian Stretch,
# you need 1.0.x for ccminer

$ sudo apt install libssl1.0-dev libssl1.0.2

# You need to use nvcc to compile ccminer
# nvcc needs gcc or clang to work
# nvcc + clang is incompatible with ccminer (errors with -fPIC will appear)
# GCC of version >= 6 is incompatible with nvcc
# therefore you need to install GCC-5
# it's not available in Debian Stretch repos
# you can temporarily add Debian Unstable repos to install it
# add the following lines to /etc/apt/sources.list to enable debian
# unstable repos:

deb http://mirror.yandex.ru/debian/ sid main contrib non-free
deb-src http://mirror.yandex.ru/debian/ sid main contrib non-free

# now you can do

$ sudo apt update
$ sudo apt install gcc-5 g++-5

# now remove those 2 lines or comment them out to disable debian unstable repos

# Now it's time to configure ccminer's build process

$ git clone https://github.com/tpruvot/ccminer
$ cd ccminer
# read README.md, INSTALL, build.sh

# uncomment the required line in Makefile.am 
# according to https://github.com/tpruvot/ccminer/wiki/Compatibility

# you need to replace some values in configure.sh to have the following result:
# you need to set --with-cuda=/usr/lib/nvidia-cuda-toolkit
# and CXX=g++-5 in configure.sh
# the result should be as follows:

$ git diff configure.sh
diff --git a/configure.sh b/configure.sh
index a4c4f46..2c17df7 100755
--- a/configure.sh
+++ b/configure.sh
@@ -3,5 +3,5 @@
 extracflags="-march=native -D_REENTRANT -falign-functions=16 -falign-jumps=16 -falign-labels=16"

 CUDA_CFLAGS="-O3 -lineno -Xcompiler -Wall  -D_FORCE_INLINES" \
-       ./configure CXXFLAGS="-O3 $extracflags" --with-cuda=/usr/local/cuda --with-nvml=libnvidia-ml.so
+       ./configure CXXFLAGS="-O3 $extracflags" --with-cuda=/usr/lib/nvidia-cuda-toolkit/ --with-nvml=libnvidia-ml.so CXX=g++-5

# now you can build everything

$ ./autogen.sh
$ ./configure.sh
$ make -j9

# now you have ccminer executable file in this directory, congratulations
```

** How to compile on macOS **

# Step 1: download and install CUDA Toolkit 8 or more recent
# https://developer.nvidia.com/cuda-toolkit-archive

# Step 2: install Homebrew
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# Step 3: dependencies
brew install pkg-config autoconf automake curl openssl llvm

./build.sh

./ccminer -n

